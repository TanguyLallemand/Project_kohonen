}
# Compute RMSD
rmsd<-function(training_dataset_for_block_a, kohonen_matrix)
{
print(training_dataset_for_block_a)
print(kohonen_matrix)
difference<-as.numeric(training_dataset_for_block_a)-as.numeric(kohonen_matrix)
for(j in 1:length(difference))
{
if (difference[j]< -180)
{
difference[j]=difference[j]+360
}
if (difference[j]> +180)
{
difference[j]=difference[j]-360
}
}
distance=sqrt(mean(difference^2))
print(distance)
return(distance)
}
rmsd_function<-function(training_dataset_for_block_a, kohonen_matrix)
{
rms<-0
for (i in 1:ncol(kohonen_matrix[1]))
{
difference <- as.numeric(kohonen_matrix[i])-as.numeric(training_dataset_for_block_a[i])
rms <- sqrt(mean(difference^2))
}
rms = rms/8
print(rms)
return(rms)
}
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:4)
{
#rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
# Compute RMSD
rmsd<-function(training_dataset_for_block_a, kohonen_matrix)
{
print(training_dataset_for_block_a)
print(kohonen_matrix)
difference<-as.numeric(training_dataset_for_block_a)-as.numeric(kohonen_matrix)
for(j in 1:length(difference))
{
if (difference[j]< -180)
{
difference[j]=difference[j]+360
}
if (difference[j]> +180)
{
difference[j]=difference[j]-360
}
}
distance=sqrt(mean(difference^2))
print(distance)
return(distance)
}
rmsd_function<-function(training_dataset_for_block_a, kohonen_matrix)
{
rms<-0
for (i in 1:ncol(training_dataset_for_block_a[1]))
{
difference <- as.numeric(kohonen_matrix[i])-as.numeric(training_dataset_for_block_a[i])
rms <- sqrt(mean(difference^2))
}
rms = rms/8
print(rms)
return(rms)
}
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:4)
{
#rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:2)
{
#rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:1)
{
#rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:1)
{
rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
#rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
# Compute RMSD
rmsd<-function(training_dataset_for_block_a, kohonen_matrix)
{
print(training_dataset_for_block_a)
print(kohonen_matrix)
difference<-as.numeric(training_dataset_for_block_a)-as.numeric(kohonen_matrix)
distance=sqrt(mean(difference^2))
print(distance)
return(distance)
}
rmsd_function<-function(training_dataset_for_block_a, kohonen_matrix)
{
rms<-0
for (i in 1:ncol(training_dataset_for_block_a[1]))
{
difference <- as.numeric(kohonen_matrix[i])-as.numeric(training_dataset_for_block_a[i])
rms <- sqrt(mean(difference^2))
}
rms = rms/8
print(rms)
return(rms)
}
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:1)
{
rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
#rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
# Compute RMSD
rmsd<-function(training_dataset_for_block_a, kohonen_matrix)
{
print(training_dataset_for_block_a)
print(kohonen_matrix)
difference<-as.numeric(training_dataset_for_block_a)-as.numeric(kohonen_matrix)
distance=sqrt(mean(difference^2))
distance=distance/ncol(training_dataset_for_block_a[1])
print(distance)
return(distance)
}
rmsd_function<-function(training_dataset_for_block_a, kohonen_matrix)
{
rms<-0
for (i in 1:ncol(training_dataset_for_block_a[1]))
{
difference <- as.numeric(kohonen_matrix[i])-as.numeric(training_dataset_for_block_a[i])
rms <- sqrt(mean(difference^2))
}
rms = rms/8
print(rms)
return(rms)
}
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:1)
{
rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
#rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:1)
{
rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
# Compute RMSD
rmsd<-function(training_dataset_for_block_a, kohonen_matrix)
{
difference<-as.numeric(training_dataset_for_block_a)-as.numeric(kohonen_matrix)
distance=sqrt(mean(difference^2))
distance=distance/ncol(training_dataset_for_block_a[1])
print(distance)
return(distance)
}
#rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
# rmsd_function<-function(training_dataset_for_block_a, kohonen_matrix)
# {
#     rms<-0
#     for (i in 1:ncol(training_dataset_for_block_a[1]))
#     {
#         difference <- as.numeric(kohonen_matrix[i])-as.numeric(training_dataset_for_block_a[i])
#         rms <- sqrt(mean(difference^2))
#     }
#     rms = rms/8
#     print(rms)
#     return(rms)
# }
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:1)
{
rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
# Compute RMSD
rmsd<-function(training_dataset_for_block_a, kohonen_matrix)
{
difference<-as.numeric(training_dataset_for_block_a)-as.numeric(kohonen_matrix)
print(difference)
distance=sqrt(mean(difference^2))
distance=distance/ncol(training_dataset_for_block_a[1])
print(distance)
return(distance)
}
#rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
# rmsd_function<-function(training_dataset_for_block_a, kohonen_matrix)
# {
#     rms<-0
#     for (i in 1:ncol(training_dataset_for_block_a[1]))
#     {
#         difference <- as.numeric(kohonen_matrix[i])-as.numeric(training_dataset_for_block_a[i])
#         rms <- sqrt(mean(difference^2))
#     }
#     rms = rms/8
#     print(rms)
#     return(rms)
# }
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:1)
{
rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
# Compute RMSD
rmsd<-function(training_dataset_for_block_a, kohonen_matrix)
{
difference<-as.numeric(training_dataset_for_block_a)-as.numeric(kohonen_matrix)
print(difference[1])
for(j in 1:length(difference)){
if (difference[j]< -180) {difference[j]=difference[j]+360}
if (difference[j]> +180) {difference[j]=difference[j]-360}
}
print(difference[1])
distance=sqrt(mean(difference^2))
distance=distance/ncol(training_dataset_for_block_a[1])
print(distance)
return(distance)
}
#rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
# rmsd_function<-function(training_dataset_for_block_a, kohonen_matrix)
# {
#     rms<-0
#     for (i in 1:ncol(training_dataset_for_block_a[1]))
#     {
#         difference <- as.numeric(kohonen_matrix[i])-as.numeric(training_dataset_for_block_a[i])
#         rms <- sqrt(mean(difference^2))
#     }
#     rms = rms/8
#     print(rms)
#     return(rms)
# }
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:1)
{
rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
# Compute RMSD
rmsd<-function(training_dataset_for_block_a, kohonen_matrix)
{
difference<-as.numeric(training_dataset_for_block_a)-as.numeric(kohonen_matrix)
distance=sqrt(mean(difference^2))
distance=distance/ncol(training_dataset_for_block_a[1])
print(distance)
return(distance)
}
#rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
# rmsd_function<-function(training_dataset_for_block_a, kohonen_matrix)
# {
#     rms<-0
#     for (i in 1:ncol(training_dataset_for_block_a[1]))
#     {
#         difference <- as.numeric(kohonen_matrix[i])-as.numeric(training_dataset_for_block_a[i])
#         rms <- sqrt(mean(difference^2))
#     }
#     rms = rms/8
#     print(rms)
#     return(rms)
# }
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:1)
{
rmsd_result<-lapply(list_of_random_vector, rmsd, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
#list_of_random_vector <- read.csv("~/Documents/Master2/Semestre2/bioinfo_structurale/vetrivel/session3/Project_kohonen/random_file.csv", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-list()
# A loop to generate a random dataset
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:1)
{
rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
list_of_random_vector<-generate_a_random_dataset_function()
# A loop to generate a random dataset
generate_a_random_dataset_function<-function()
{
list_of_random_vector<-list()
for (iterator in 1:number_of_neurons)
{
# Generate a vector of eight values
vector_rand <- round(runif(8, min=-180, max=180), digits=0)
# Save it in a list
list_of_random_vector[iterator]<-list(vector_rand)
}
return(list_of_random_vector)
}
# Call this function
# rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
rmsd_function<-function(training_dataset_for_block_a, kohonen_matrix)
{
rms<-0
for (i in 1:ncol(training_dataset_for_block_a[1]))
{
difference <- as.numeric(kohonen_matrix[i])-as.numeric(training_dataset_for_block_a[i])
rms <- sqrt(mean(difference^2))
}
print(rms)
return(rms)
}
source("functions.R")
setwd(getwd())
training_dataset_for_block_a <- read.csv("./dataset/training_dataset_for_block_a.phipsi", header=FALSE)
number_of_neurons<-16
list_of_random_vector<-generate_a_random_dataset_function()
# Construction of a matrix for Kohonen map
kohonen_matrix<-matrix(list_of_random_vector,ncol=sqrt(number_of_neurons))
for(x in 1:1)
{
rmsd_result<-lapply(list_of_random_vector, rmsd_function, training_dataset_for_block_a=training_dataset_for_block_a[1,])
}
